version: 2.1

orbs:
  aws-eks: circleci/aws-eks@0.2.0
  aws-ecr: circleci/aws-ecr@3.1.0
  kubernetes: circleci/kubernetes@0.3.0


workflows:
  deployment:
    jobs:
      - check-docker-code
      - aws-ecr/build_and_push_image:
          name: build-and-push-image
          account-url: AWS_ECR_URL
          region: AWS_DEFAULT_REGION
          repo: udacity-capstone-app-deployment
          dockerfile: ~/project/nginx_app/Dockerfile
          path: ~/project/nginx_app
          tag: ${CIRCLE_SHA1:0:7}
          requires:
            - check-docker-code
      # - create-kubernetes-cluster:
      #     requires:
      #       - aws-ecr/build_and_push_image

 
jobs:
    check-docker-code:
      docker:
      - image: ubuntu
      working_directory: ~/project/
      steps:
      - checkout
      - run:
          name: install hadolint
          command: |
            cd nginx_app
            make install
      - run:
          name: run lint on Dockerfile
          command: |
            cd nginx_app          
            make lint
            RESULT=$?
            if [ ${RESULT} -eq 0 ]; then
              echo "successfully linted files - proceeding to build image"
            else
              echo "failed to lint files - please fix and try again"
            fi
    # create-kubernetes-cluster:
    #   docker:
    #     - image: alpine/k8s:1.15.12
    #   working_directory: /tmp/workspace
    #   steps:
    #     - checkout
    #     # - run:
    #     #     name: store old cluster name
    #     #     command: |
    #     #       echo $(aws eks list-clusters | python3 -c "import sys, json; print(json.load(sys.stdin)['clusters'][0])") > cluster.txt
    #     #       cat cluster.txt

    #     - run:
    #         name: create kubernetes cluster
    #         command: |
    #           # using cli to be able to specify unique name for cluster
    #           eksctl create cluster --name="udacity-capstone-${$CIRCLE_SHA1:0:7}" \
    #           --nodes-min=6 --nodes-max=8 \
    #           --node-type=t3.medium
 