version: 2.1

orbs:
  docker: circleci/docker@1.6.0

commands:
  destroy-environment:
    description: Destroy stacks given a workflow ID.
    steps:
      - run:
          name: Destroy new deployment Infrastructure
          when: on_fail
          command: |
            aws eks update-kubeconfig --name="udacity-capstone-${CIRCLE_SHA1:0:7}"
            export KUBECONFIG=/root/.kube/config
            kubectl get svc
            kubectl delete -f deployment/
            eksctl delete cluster udacity-capstone-${CIRCLE_SHA1:0:7}


workflows:
  deployment:
    jobs:
      # - check-docker-code
      # - docker/publish:
      #     image: $DOCKER_LOGIN/udacity-capstone-app-deployment
      #     path: ~/project/nginx_app
      #     update-description: true
      #     docker-context: ~/project/nginx_app
      #     tag: ${CIRCLE_SHA1:0:7},latest
      #     requires:
      #       - check-docker-code
      - create-kubernetes-cluster
          # requires:
          #   - docker/publish
      - smoke-test:
          requires:
            - create-kubernetes-cluster
      - delete-previous-deployment:
          requires:
            - smoke-test
      
jobs:
    check-docker-code:
      docker:
      - image: python:3.7.3-stretch
      working_directory: ~/project/
      steps:
      - checkout
      - run:
          name: Installing Linters
          command: |
            cd nginx_app
            make install
      - run:
          name: run lint on Dockerfile
          command: |
            cd nginx_app          
            make lint
            RESULT=$?
            if [ ${RESULT} -eq 0 ]; then
              echo "successfully linted files - proceeding to build image"
            else
              echo "failed to lint files - please fix and try again"
            fi

    create-kubernetes-cluster:
      docker:
        - image: alpine/k8s:1.15.12
      working_directory: /tmp/workspace
      steps:
        - checkout
        - run:
            name: store current cluster name
            command: |
              echo $(aws eks list-clusters | python3 -c "import sys, json; print(json.load(sys.stdin)['clusters'][0])") > cluster-old.txt
              cat cluster-old.txt
        # - run:
        #     name: create new kubernetes cluster
        #     command: |
        #       # Updating the cluster name in the Yaml 
        #       sed -i "s/basic-cluster/udacity-capstone-${CIRCLE_SHA1:0:7}/g" cluster.yml

        #       eksctl create cluster -f cluster.yml

        - run:
            name: store new cluster name
            command: |
              echo "udacity-capstone-${CIRCLE_SHA1:0:7}" > cluster.txt
              cat cluster.txt
        # - run:
        #     name: Deploy Application on Kubernetes
        #     command: |
        #       aws eks update-kubeconfig --name "udacity-capstone-${CIRCLE_SHA1:0:7}"
        #       export KUBECONFIG=/root/.kube/config
        #       kubectl get svc
        #       kubectl apply -f deployment/
        #       kubectl rollout status deployment nginx-web-app
        - run:
            name: Add service ip to a file
            command: |
              echo "$(kubectl get services nginx-web-app-service --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')" > service.txt
              cat service.txt

        - persist_to_workspace:
            root: /tmp/workspace
            paths:
              - cluster.txt
              - cluster-old.txt
              - service.txt
        
        - destroy-environment

    smoke-test:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - attach_workspace:
            at: /tmp/workspace
        - run:
            name: Install dependencies
            command: |
              apk add --update curl
        - run:
            name: smoke test
            command: |

              export URL="http://"$(cat /tmp/workspace/service.txt)":15444"
              echo $URL
              
              # Allow time for the LB to come online and start serving traffic
              sleep 120

              if curl ${URL} | grep "Hello World"
              then
                echo "Smoke Test Success - Website able to be reached"
                return 0  
              else
                echo "Unable to access Website"
                return 0
              fi

        - destroy-environment

    delete-previous-deployment:
      docker:
        - image: alpine/k8s:1.15.12
      working_directory: /tmp/workspace
      steps:
        - checkout
        - attach_workspace:
            at: /tmp/workspace
        - run:
            name: delete previous app deployment
            command: |
              OLD_CLUSTER=$(cat /tmp/workspace/cluster-old.txt)
              echo $OLD_CLUSTER
              if [ -z "$OLD_CLUSTER" ]
              then
                    echo $OLD_CLUSTER " : There is no old cluster found to be deleted"
              else
                    echo $OLD_CLUSTER " : Found old cluster found to be deleted"
                    aws eks update-kubeconfig --name="${OLD_CLLUSTER}"
                    export KUBECONFIG=/root/.kube/config
                    kubectl get svc
                    kubectl delete -f deployment/
              fi
        - run:
            name: Delete Old kubernetes cluster
            command: |
              OLD_CLUSTER=$(cat /tmp/workspace/cluster-old.txt)
              if [ -z "$OLD_CLUSTER" ]
              then
                    echo "$OLD_CLUSTER : There is no old cluster found to be deleted"
              
              else
                    echo $OLD_CLUSTER " : Found old cluster found to be deleted"
                    eksctl delete cluster $OLD_CLUSTER
              fi



