version: 2.1

orbs:
  aws-eks: circleci/aws-eks@0.2.0
  aws-ecr: circleci/aws-ecr@3.1.0
  kubernetes: circleci/kubernetes@0.3.0


parameters:
  cluster_name:
    type: string
    description: |
      Name of the EKS cluster
    default: ""
  docker_image_name:
    type: string
    description: |
      Name of the docker image to be deployed
    default: ""
  version_info:
    type: string
    description: |
      App version information
    default: ""
  AWS_DEFAULT_REGION:
    type: string
    description: |
      AWS region
    default: ""
  AWS_ECR_URL:
    type: string
    description: |
      AWS ECR Repo
    default: ""

workflows:
  deployment:
    jobs:
      - check-docker-code
      - aws-ecr/build_and_push_image:
          name: build-and-push-image
          account-url: AWS_ECR_URL
          region: AWS_DEFAULT_REGION
          repo: udacity-capstone-app-deployment
          dockerfile: ~/project/nginx_app/Dockerfile
          path: ~/project/nginx_app
          tag: ${CIRCLE_SHA1:0:7}
          requires:
            - check-docker-code

      # - aws-eks/create-cluster:
      #     cluster-name: cluster_name
      #     aws-region: AWS_DEFAULT_REGION
      #     requires:
      #       - build-and-push-image

      # - deploy-application:
      #     cluster-name: cluster_name
      #     aws-region: AWS_DEFAULT_REGION
      #     docker-image-name: "${AWS_ECR_URL}/${docker_image-name:${CIRCLE_SHA1:0:7}"
      #     version-info: "${CIRCLE_SHA1:0:7}"
      #     requires:
      #       - aws-eks/create-cluster

#       - test-application:
#           name: test-application
#           cluster-name: cluster_name
#           aws-region: AWS_DEFAULT_REGION
#           expected-version-info: "${CIRCLE_SHA1:0:7}"
#           requires:
#             - deploy-application

#       - undeploy-application:
#           cluster-name: cluster_name
#           aws-region: AWS_DEFAULT_REGION
#           requires:
#             - test-application
#       - aws-eks/delete-cluster:
#           cluster-name: cluster_name
#           aws-region: AWS_DEFAULT_REGION
#           wait: true
#           requires:
#             - undeploy-application



jobs:
    check-docker-code:
      docker:
      - image: python:3.7.3-stretch
      working_directory: ~/project/
      steps:
      - checkout
      - run:
          name: install hadolint
          command: |
            cd nginx_app
            make install
      - run:
          name: run lint on Dockerfile
          command: |
            cd nginx_app          
            make lint
            RESULT=$?
            if [ ${RESULT} -eq 0 ]; then
              echo "successfully linted dockerfile - proceeding to build image"
            else
              echo "failed to lint dockerfile - please fix and try again"
            fi

#   deploy-application:
#     executor: aws-eks/python3
#     steps:
#       - checkout
#       - run:
#           name: Create deployment manifest
#           command: |
#             BUILD_DATE=$(date '+%Y%m%d%H%M%S')
#             cat deployment/demo-app-deployment.yaml.template |\
#                sed "s|DOCKER_IMAGE_NAME|<< parameters.docker-image-name >>|\
#                 g;s|BUILD_DATE_VALUE|$BUILD_DATE|g;s|VERSION_INFO_VALUE|\
#                 << parameters.version-info >>|g" > deployment/demo-app-deployment.yaml
#       - aws-eks/update-kubeconfig-with-authenticator:
#           cluster-name: << parameters.cluster-name >>
#           install-kubectl: true
#           aws-region: << parameters.aws-region >>
#       - kubernetes/create-or-update-resource:
#           resource-file-path: "deployment/demo-app-deployment.yaml"
#           get-rollout-status: true
#           resource-name: deployment/demoapp
#       - kubernetes/create-or-update-resource:
#           resource-file-path: "deployment/demo-app-service.yaml"
#   test-application:
#     executor: aws-eks/python3
#     parameters:
#       cluster-name:
#         description: |
#           Name of the EKS cluster
#         type: string
#       aws-region:
#         description: |
#           AWS region
#         type: string
#         default: ""
#       expected-version-info:
#         description: |
#           Expected app version (this is used for testing that the
#           correct version has been deployed)
#         type: string
#     steps:
#       - aws-eks/update-kubeconfig-with-authenticator:
#           cluster-name: << parameters.cluster-name >>
#           install-kubectl: true
#           aws-region: << parameters.aws-region >>
#       - run:
#           name: Wait for service to be ready
#           command: |
#             kubectl get pods
#             kubectl get services
#             sleep 30
#             for attempt in {1..20}; do
#               EXTERNAL_IP=$(kubectl get service demoapp | awk '{print $4}' | tail -n1)
#               echo "Checking external IP: ${EXTERNAL_IP}"
#               if [ -n "${EXTERNAL_IP}" ] && [ -z $(echo "${EXTERNAL_IP}" | grep "pending") ]; then
#                 break
#               fi
#               echo "Waiting for external IP to be ready: ${EXTERNAL_IP}"
#               sleep 10
#             done
#             sleep 180
#             curl -s --retry 10 "http://$EXTERNAL_IP" | grep "<< parameters.expected-version-info >>"
#   undeploy-application:
#     executor: aws-eks/python3
#     parameters:
#       cluster-name:
#         description: |
#           Name of the EKS cluster
#         type: string
#       aws-region:
#         description: |
#           AWS region
#         type: string
#         default: ""
#     steps:
#       - aws-eks/update-kubeconfig-with-authenticator:
#           cluster-name: << parameters.cluster-name >>
#           install-kubectl: true
#           aws-region: << parameters.aws-region >>
#       - kubernetes/delete-resource:
#           resource-types: "deployment,service"
#           label-selector: "app=demo"
#           wait: true
#       - run:
#           name: Check on pod status
#           command: |
#             kubectl get pods
